package com.inovationware.toolkit.features.code.verb;

import java.util.ArrayList;
import java.util.List;

public class Vocabulary {

    private static Vocabulary instance;

    private Vocabulary() {
        initialize();
    }

    public static Vocabulary getInstance() {
        if (instance == null) instance = new Vocabulary();
        return instance;
    }

    public List<String> noun = new ArrayList<>();
    public List<String> verb = new ArrayList<>();
    public List<String> pronoun = new ArrayList<>();
    public List<String> greeting = new ArrayList<>();
    public List<String> adjective = new ArrayList<>();
    public List<String> confirmation = new ArrayList<>();
    public List<String> postfix = new ArrayList<>();
    public List<String> linker = new ArrayList<>();
    public List<String> self = new ArrayList<>();

    private void initialize() {
        for (String s : nouns) noun.add(s);
        for (String s : verbs) verb.add(s);
        for (String s : pronouns) pronoun.add(s);
        for (String s : greetings) greeting.add(s);
        for (String s : adjectives) adjective.add(s);
        for (String s : confirmations) confirmation.add(s);
        for (String s : postfixes) postfix.add(s);
        for (String s : linkers) linker.add(s);
        for (String s : selfs) self.add(s);
    }

    private List<String> nouns = List.of(
            "home", "workplace", "restroom", "kitchen", "bed", "bedroom", "park", "restaurant", "pub", "bathroom", "parlor", "food", "water"
    );

    private List<String> verbs = List.of(
            "go", "work", "run", "come", "eat", "sleep", "wake", "clean"
    );

    private List<String> pronouns = List.of(
            "he", "she", "they", "it", "you", "me"
    );

    private List<String> greetings = List.of(
            "good-day"
    );

    private List<String> adjectives = List.of(
            "cool", "beautiful", "cute", "brilliant", "sharp"
    );

    private List<String> confirmations = List.of(
            "yes", "no"
    );

    private List<String> postfixes = List.of(
            "please", "now", "now-please", "later", "later-please", "before", "before-please", "yesterday", "yesterday-please", "today", "today-please", "tomorrow", "tomorrow-please"
    );

    private final List<String> linkers = List.of(
            "want", "need", "request", "for"
    );

    private List<String> selfs = List.of(
            "I"
    );

    public List<String> English = List.of(
            "good",
            "bye",
            "you",
            "public",
            "static",
            "void",
            "main",
            "String[]",
            "final",
            "String",
            "home",
            "workplace",
            "restroom",
            "kitchen",
            "bed",
            "bedroom",
            "park",
            "restaurant",
            "pub",
            "bathroom",
            "parlor",
            "food",
            "water",
            "go",
            "work",
            "run",
            "come",
            "eat",
            "sleep",
            "wake",
            "clean",
            "he",
            "she",
            "they",
            "it",
            "you",
            "me",
            "good-day",
            "cool",
            "beautiful",
            "cute",
            "brilliant",
            "sharp",
            "yes",
            "no",
            "please",
            "now",
            "now-please",
            "later",
            "later-please",
            "before",
            "before-please",
            "yesterday",
            "yesterday-please",
            "today",
            "today-please",
            "tomorrow",
            "tomorrow-please",
            "want",
            "need",
            "request",
            "for",
            "I",
            "class",
            "char",
            "catch",
            "case",
            "byte",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extends",
            "finally",
            "float",
            "for",
            "continue",
            "int",
            "instanceof",
            "import",
            "implements",
            "if",
            "interface",
            "long",
            "module",
            "native",
            "new",
            "package",
            "private",
            "protected",
            "requires",
            "return",
            "short",
            "super",
            "switch",
            "synchronized",
            "this",
            "throw",
            "throws",
            "transient",
            "try",
            "var",
            "volatile",
            "null",
            "false",
            "true",
            "while",
            "break",
            "boolean",
            "assert",
            "abstract",
            "const",
            "def",
            "del",
            "except",
            "from",
            "elif",
            "global",
            "in",
            "is",
            "lambda",
            "None",
            "nonlocal",
            "not",
            "or",
            "pass",
            "raise",
            "with",
            "yield",
            "add",
            "alter",
            "asc",
            "between",
            "create",
            "table",
            "drop",
            "desc",
            "database",
            "distinct",
            "exists",
            "like",
            "select",
            "where",
            "<html>",
            "<h1>",
            "</h1>",
            "<h2>",
            "</h2>",
            "<h3>",
            "</h3>",
            "<h4>",
            "</h4>",
            "<h5>",
            "</h5>",
            "<h6>",
            "</h6>",
            "<body>",
            "<title>",
            "</title>",
            "<head>",
            "</head>",
            "</html>",
            "</body>",
            "<header>",
            "</header>",
            "<div>",
            "</div>",
            "<b>",
            "</b>",
            "<br>",
            "</br>",
            "<p>",
            "</p>",
            "<summary>",
            "</summary>",
            "<details>",
            "</details>",
            "<main>",
            "</main>",
            "<footer>",
            "</footer>",
            "<address>",
            "</address>",
            "<span>",
            "</span>",
            "<script>",
            "</script>",
            "<ul>",
            "</ul>",
            "<ol>",
            "</ol>",
            "<select>",
            "</select>",
            "<li>",
            "</li>",
            "<nav>",
            "</nav>",
            "<textarea>",
            "</textarea>",
            "<button>",
            "</button>",
            "<option>",
            "</option>",
            "layout_width",
            "layout_height",
            "layout_margin",
            "orientation",
            "layout_constraintTop",
            "<xml>",
            "finish",
            "getText",
            "toString",
            "setText",
            "Toast",
            "makeText",
            "show",
            "TextView",
            "Context",
            "ResourceBundle",
            "setVisibility",
            "Visibility",
            "Gone",
            "View",
            "Visible",
            "Invisible",
            "Bitmap",
            "Intent",
            "Activity",
            "LinearLayout",
            "Gravity",
            "center",
            "xml",
            "version",
            "encoding",
            "text"
            );
    public List<String> Yoruba = List.of(
            "dára",
            "ó dàbọ̀",
            "ìwọ",
            "gbangba",
            "àìmì",
            "òfo",
            "àkọ́kọ́",
            "okùn[]",
            "àṣẹ",
            "okùn",
            "ilé",
            "ibiṣẹ́",
            "ilé ìgbọ̀nsẹ̀",
            "yàrá ìdáná",
            "ìbùsùn",
            "yàrá",
            "agbègbè ìjókòó ní gbangba",
            "ilé oúnjẹ",
            "ilé ọtí",
            "balùwẹ̀",
            "yàrá ìjókòó",
            "oúnjẹ",
            "omi",
            "lọ",
            "ṣiṣẹ́",
            "sáré",
            "wá",
            "jẹun",
            "sùn",
            "jí",
            "fọ̀ọ́",
            "ọkùnrin yẹn",
            "obìnrin yẹn",
            "àwọn",
            "òun",
            "ìwọ",
            "èmi",
            "ẹ kúu dédé ìwòyí",
            "dára",
            "l'ẹ́wà",
            "wuyì",
            "já fáfá",
            "mú",
            "bẹ́ẹ̀ni",
            "bẹ́ẹ̀kọ́",
            "jọ̀wọ́",
            "ìsinyìí",
            "ìsinyìí jọ̀wọ́",
            "tó bá yá",
            "tó bá yá jọ̀wọ́",
            "ṣáájú",
            "ṣáájú jọ̀wọ́",
            "ni ànàá",
            "ni ànàá jọ̀wọ́",
            "ni énìí",
            "ni énìí jọ̀wọ́",
            "ni ọ́la",
            "ni ọ́la jọ̀wọ́",
            "fẹ́",
            "nílò",
            "bèèrè",
            "fún",
            "Èmi",
            "ìṣọ̀rí",
            "ìwà",
            "mú",
            "àríyànjiyàn",
            "kékeré",
            "àìyípadà",
            "ṣe",
            "méjì",
            "òmíràn",
            "kíkà",
            "jogún",
            "níparí",
            "léèfófó",
            "fún",
            "lọ",
            "odidi",
            "àpẹrẹ",
            "wọlé",
            "lo",
            "tí",
            "àdéhùn",
            "gùn",
            "ẹgbẹ́",
            "àbínibí",
            "titun",
            "ìdì",
            "ìpamọ́",
            "dáàbòbò",
            "béèrè",
            "yọ",
            "kúkurú",
            "òbí",
            "ìdánwò",
            "àmúṣiṣẹ́pọ̀",
            "èyí",
            "ju",
            "jíjù",
            "àìpẹ́",
            "gbìyànjú",
            "oníìyípadà",
            "ìyípadà",
            "asán",
            "èké",
            "òtítọ́",
            "nígbà",
            "dúró",
            "ṣé",
            "múlẹ̀",
            "àgbékalẹ̀",
            "àìyípadà",
            "yàn",
            "kúrò",
            "àfi",
            "láti",
            "tóbá",
            "àgbáyé",
            "nínú",
            "jẹ́",
            "iṣẹ́dìwọ̀n",
            "òfìfo",
            "àpadé",
            "rárá",
            "tàbí",
            "kúrò",
            "raise",
            "pẹ̀lú",
            "èso",
            "kún",
            "yípadà",
            "sókè",
            "àárín",
            "ṣẹ̀dá",
            "àkójọpọ̀",
            "kúrò",
            "sílẹ̀",
            "ìpìlẹ́",
            "gedegbe",
            "wà",
            "jọ",
            "mú",
            "níbi",
            "<ìṣàmìsí>",
            "<àkọ́rí1>",
            "</àkọ́rí1>",
            "<àkọ́rí2>",
            "</àkọ́rí2>",
            "<àkọ́rí3>",
            "</àkọ́rí3>",
            "<àkọ́rí4>",
            "</àkọ́rí4>",
            "<àkọ́rí5>",
            "</àkọ́rí5>",
            "<àkọ́rí6>",
            "</àkọ́rí6>",
            "<ìdásílẹ̀>",
            "<àkọ́lé>",
            "</àkọ́lé>",
            "<iṣẹ́dìwọ̀n>",
            "</iṣẹ́dìwọ̀n>",
            "</ìṣàmìsí>",
            "</ìdásílẹ̀>",
            "<iṣẹ́dìwọ̀n>",
            "</iṣẹ́dìwọ̀n>",
            "<pínpín>",
            "</pínpín>",
            "<tóbi>",
            "</tóbi>",
            "<fò>",
            "</fò>",
            "<ìpínrọ̀>",
            "</ìpínrọ̀>",
            "<ìsọníṣókí>",
            "</ìsọníṣókí>",
            "<àlàyé>",
            "</àlàyé>",
            "<àkọ́kọ́>",
            "</àkọ́kọ́>",
            "<ìsàlẹ̀>",
            "</ìsàlẹ̀>",
            "<ibùgbé>",
            "</ibùgbé>",
            "<ìwọ̀n>",
            "</ìwọ̀n>",
            "<àkọsílẹ̀>",
            "</àkọsílẹ̀>",
            "<ìtò>",
            "</ìtò>",
            "<ìtòtẹ̀lé>",
            "</ìtòtẹ̀lé>",
            "<mú>",
            "</mú>",
            "<tótò>",
            "</tótò>",
            "<àpèjúwe>",
            "</àpèjúwe>",
            "<agbègbè>",
            "</agbègbè>",
            "<ìṣeṣe>",
            "</ìṣeṣe>",
            "<ìmú>",
            "</ìmú>",
            "fífẹ̀",
            "gíga",
            "àlàfo",
            "ìdoríkọ",
            "òkè",
            "<ìṣàmìsíRírọ>",
            "tán",
            "gbaỌ̀rọ̀",
            "diỌ̀rọ̀",
            "ṣètòỌ̀rọ̀",
            "Ṣọ",
            "ṣeỌ̀rọ̀",
            "fihàn",
            "ÀàyèỌ̀rọ̀",
            "Ìṣètò",
            "ÈèlòLápapọ̀",
            "ṣètòHíhàn",
            "Híhàn",
            "Tilọ̀",
            "Ààyè",
            "Hàn",
            "Aláìhàn",
            "Àwòrán",
            "Ìdí",
            "Agbègbè",
            "Ìfilélẹ́Gbọọrọ",
            "wálẹ́",
            "àárín",
            "ìṣàmìsíRírọ",
            "ìkéde",
            "ìrísí",
            "̀ọ̀rọ̀");
    //public List<String> French = List.of("bien", "adieu", "toi", "publique", "statique", "vide", "principale", "chaîne[]", "finale", "chaîne");
    public List<String> Bulgarian = List.of(
            "добре",
            "чао",
            "Вие",
            "публичен",
            "статичен",
            "невалиден",
            "основен",
            "низ[]",
            "финал",
            "низ",
            "местожителство",
            "офис",
            "тоалетна",
            "кухня",
            "легло",
            "спалня",
            "паркирам",
            "паркирам",
            "кръчма",
            "баня",
            "салон",
            "храна",
            "вода",
            "отивам",
            "работа",
            "тичам",
            "идвам",
            "Яжте",
            "сън",
            "събуждам",
            "чиста",
            "той",
            "тя",
            "те",
            "то",
            "Вие",
            "аз",
            "добър ден",
            "готино",
            "красив",
            "сладко",
            "брилянтен",
            "остър",
            "да",
            "не",
            "Моля те",
            "сега",
            "сега моля",
            "по късно",
            "по късно, моля",
            "преди",
            "преди моля",
            "вчера",
            "вчера, моля",
            "днес",
            "днес, моля",
            "утре",
            "утре моля",
            "искам",
            "трябва",
            "искане",
            "за",
            "аз",
            "класификация",
            "характер",
            "улов",
            "случай",
            "байт",
            "винаги",
            "направи",
            "двойно",
            "друго",
            "изброяване",
            "разшири",
            "накрая",
            "плавам",
            "за",
            "продължи",
            "цяло",
            "инстанция",
            "импортиране",
            "инструменти",
            "ако",
            "интерфейс",
            "дълго",
            "модул",
            "местен",
            "нов",
            "пакет",
            "частен",
            "защитени",
            "изисква",
            "връщане",
            "къс",
            "родител",
            "превключвател",
            "синхронизирани",
            "това",
            "хвърлям",
            "хвърля",
            "преходен",
            "опитвам",
            "променлива",
            "летлив",
            "нула",
            "невярно",
            "вярно",
            "докато",
            "прекъсвам",
            "булево",
            "твърдят",
            "абстрактно",
            "постоянен",
            "дефинирам",
            "Изтрий",
            "изключителен",
            "от",
            "алтернативно",
            "глобален",
            "в",
            "е",
            "ламбда",
            "нищо",
            "ограждащ",
            "не",
            "или",
            "пас",
            "повишавам",
            "с",
            "Добив",
            "добавяне",
            "алтер",
            "възходящ",
            "между",
            "създавайте",
            "таблица",
            "изпускайте",
            "низходяща",
            "База",
            "различен",
            "съществува",
            "като",
            "изберете",
            "където",
            "<маркиране>",
            "<заглавие1>",
            "</заглавие1>",
            "<заглавие2>",
            "</заглавие2>",
            "<заглавие3>",
            "</заглавие3>",
            "<заглавие4>",
            "</заглавие4>",
            "<заглавие5>",
            "</заглавие5>",
            "<заглавие6>",
            "</заглавие6>",
            "<съставен>",
            "<заглавие>",
            "</заглавие>",
            "<дефиниции>",
            "</дефиниции>",
            "</маркиране>",
            "</съставен>",
            "<заглавка>",
            "</заглавка>",
            "<разделение>",
            "</разделение>",
            "<удебелен>",
            "</удебелен>",
            "<прекъсвам>",
            "</прекъсвам>",
            "<параграф>",
            "</параграф>",
            "<резюме>",
            "</резюме>",
            "<подробности>",
            "</подробности>",
            "<основен>",
            "</основен>",
            "<отдолу>",
            "</отдолу>",
            "<адрес>",
            "</адрес>",
            "<педя>",
            "</педя>",
            "<сценарий>",
            "</сценарий>",
            "<неподредени>",
            "</неподредени>",
            "<поръчан>",
            "</поръчан>",
            "<изберете>",
            "</изберете>",
            "<вещ>",
            "</вещ>",
            "<навигация>",
            "</навигация>",
            "<кутия>",
            "</кутия>",
            "<бутон>",
            "</бутон>",
            "<опция>",
            "</опция>",
            "ширина",
            "височина",
            "марж",
            "ориентация",
            "Топ",
            "<разширяемамаркировка>",
            "завърши",
            "вземететекст",
            "къмString",
            "задайтетекст",
            "Тост",
            "направитекст",
            "шоу",
            "Изгледнатекст",
            "Контекст",
            "Пакетресурси",
            "задайтеВидимост",
            "Видимост",
            "изчезнал",
            "Преглед",
            "Видими",
            "Невидим",
            "растерноизображение",
            "Намерение",
            "активност",
            "Линейнооформление",
            "Гравитация",
            "няма",
            "разширяемамаркировка",
            "версия",
            "кодиране",
            "текст"
    );


    public List<String> CodeInEnglish = List.of(
            "layout_width",
            "layout_height",
            "layout_margin",
            "orientation",
            "layout_constraintTop",
            "<xml>",
            "finish",
            "getText",
            "toString",
            "setText",
            "Toast",
            "makeText",
            "show",
            "TextView",
            "Context",
            "ResourceBundle",
            "setVisibility",
            "Visibility",
            "Gone",
            "View",
            "Visible",
            "Invisible",
            "Bitmap",
            "Intent",
            "Activity",
            "LinearLayout",
            "Gravity",
            "center",
            "public",
            "static",
            "void",
            "main",
            "String[]",
            "final",
            "String",
            "class",
            "char",
            "catch",
            "case",
            "byte",
            "default",
            "do",
            "double",
            "else",
            "enum",
            "extends",
            "finally",
            "float",
            "for",
            "continue",
            "int",
            "instanceof",
            "import",
            "implements",
            "if",
            "interface",
            "long",
            "module",
            "native",
            "new",
            "package",
            "private",
            "protected",
            "requires",
            "return",
            "short",
            "super",
            "switch",
            "synchronized",
            "this",
            "throw",
            "throws",
            "transient",
            "try",
            "var",
            "volatile",
            "null",
            "false",
            "true",
            "while",
            "break",
            "boolean",
            "assert",
            "abstract",
            "const",
            "def",
            "del",
            "except",
            "from",
            "elif",
            "global",
            "in",
            "is",
            "lambda",
            "None",
            "nonlocal",
            "not",
            "or",
            "pass",
            "raise",
            "with",
            "yield",
            "add",
            "alter",
            "asc",
            "between",
            "create",
            "table",
            "drop",
            "desc",
            "database",
            "distinct",
            "exists",
            "like",
            "select",
            "where",
            "<html>",
            "<h1>",
            "</h1>",
            "<h2>",
            "</h2>",
            "<h3>",
            "</h3>",
            "<h4>",
            "</h4>",
            "<h5>",
            "</h5>",
            "<h6>",
            "</h6>",
            "<body>",
            "<title>",
            "</title>",
            "<head>",
            "</head>",
            "</html>",
            "</body>",
            "<header>",
            "</header>",
            "<div>",
            "</div>",
            "<b>",
            "</b>",
            "<br>",
            "</br>",
            "<p>",
            "</p>",
            "<summary>",
            "</summary>",
            "<details>",
            "</details>",
            "<main>",
            "</main>",
            "<footer>",
            "</footer>",
            "<address>",
            "</address>",
            "<span>",
            "</span>",
            "<script>",
            "</script>",
            "<ul>",
            "</ul>",
            "<ol>",
            "</ol>",
            "<select>",
            "</select>",
            "<li>",
            "</li>",
            "<nav>",
            "</nav>",
            "<textarea>",
            "</textarea>",
            "<button>",
            "</button>",
            "<option>",
            "</option>",
            "@RestController",
            "@Controller",
            "ResponseEntity",
            "@RequestBody",
            "@SpringBootApplication",
            "@Entity",
            "[Authorized]",
            "[FromBody]",
            "[ApiController]",
            "useState",
            "useEffect",
            "useContext",
            "ElevatedButton",
            "TextButton",
            "Scaffold",
            "Dialog",
            "Iterator",
            "LocationManager",
            "Manifest",
            "LocationListener",
            "Vibrator",
            "Looper",
            "Runnable",
            "Handler",
            "getInstance",
            "LayoutManager",
            "RecyclerView",
            "LayoutInflater",
            "getElementById",
            "EventEmitter",
            "Robotics",
            "Embedded Systems Programming",
            "Automation and Control Systems",
            "Human-Machine Interaction (HMI)",
            "Telecommunications",
            "Biomedical Engineering",
            "@Test",
            "Testing",
            "Signal Processing",
            "Control Theory",
            "Machine Learning"
    );


    public List<String> CodeInYoruba = List.of(
            "fífẹ̀",
            "gíga",
            "àlàfo",
            "ìdoríkọ",
            "òkè",
            "<ìṣàmìsíRírọ>",
            "tán",
            "gbaỌ̀rọ̀",
            "diỌ̀rọ̀",
            "ṣètòỌ̀rọ̀",
            "Ṣọ",
            "ṣeỌ̀rọ̀",
            "fihàn",
            "ÀàyèỌ̀rọ̀",
            "Ìṣètò",
            "ÈèlòLápapọ̀",
            "ṣètòHíhàn",
            "Híhàn",
            "Tilọ̀",
            "Ààyè",
            "Hàn",
            "Aláìhàn",
            "Àwòrán",
            "Ìdí",
            "Agbègbè",
            "Ìfilélẹ́Gbọ̀ọ̀rọ̀",
            "wálẹ́",
            "àárín",
            "gbangba",
            "àìmì",
            "òfo",
            "àkọ́kọ́",
            "okùn[]",
            "àṣẹ",
            "okùn",
            "ìṣọ̀rí",
            "ìwà",
            "mú",
            "àríyànjiyàn",
            "kékeré",
            "àìyípadà",
            "ṣe",
            "méjì",
            "òmíràn",
            "kíkà",
            "jogún",
            "níparí",
            "léèfófó",
            "fún",
            "lọ",
            "odidi",
            "àpẹrẹ",
            "wọlé",
            "lo",
            "tí",
            "àdéhùn",
            "gùn",
            "ẹgbẹ́",
            "àbínibí",
            "titun",
            "ìdì",
            "ìpamọ́",
            "dáàbòbò",
            "béèrè",
            "yọ",
            "kúkurú",
            "òbí",
            "ìdánwò",
            "àmúṣiṣẹ́pọ̀",
            "èyí",
            "ju",
            "jíjù",
            "àìpẹ́",
            "gbìyànjú",
            "oníìyípadà",
            "ìyípadà",
            "asán",
            "èké",
            "òtítọ́",
            "nígbà",
            "dúró",
            "ṣé",
            "múlẹ̀",
            "àgbékalẹ̀",
            "àìyípadà",
            "yàn",
            "kúrò",
            "àfi",
            "láti",
            "tóbá",
            "àgbáyé",
            "nínú",
            "jẹ́",
            "iṣẹ́dìwọ̀n",
            "òfìfo",
            "àpadé",
            "rárá",
            "tàbí",
            "kúrò",
            "sọ",
            "pẹ̀lú",
            "èso",
            "kún",
            "yípadà",
            "sókè",
            "àárín",
            "ṣẹ̀dá",
            "àkójọpọ̀",
            "kúrò",
            "sílẹ̀",
            "ìpìlẹ́",
            "gedegbe",
            "wà",
            "jọ",
            "mú",
            "níbi",
            "<ìṣàmìsí>",
            "<àkọ́rí1>",
            "</àkọ́rí1>",
            "<àkọ́rí2>",
            "</àkọ́rí2>",
            "<àkọ́rí3>",
            "</àkọ́rí3>",
            "<àkọ́rí4>",
            "</àkọ́rí4>",
            "<àkọ́rí5>",
            "</àkọ́rí5>",
            "<àkọ́rí6>",
            "</àkọ́rí6>",
            "<ìdásílẹ̀>",
            "<àkọ́lé>",
            "</àkọ́lé>",
            "<iṣẹ́dìwọ̀n>",
            "</iṣẹ́dìwọ̀n>",
            "</ìṣàmìsí>",
            "</ìdásílẹ̀>",
            "<iṣẹ́dìwọ̀n>",
            "</iṣẹ́dìwọ̀n>",
            "<pínpín>",
            "</pínpín>",
            "<tóbi>",
            "</tóbi>",
            "<fò>",
            "</fò>",
            "<ìpínrọ̀>",
            "</ìpínrọ̀>",
            "<ìsọníṣókí>",
            "</ìsọníṣókí>",
            "<àlàyé>",
            "</àlàyé>",
            "<àkọ́kọ́>",
            "</àkọ́kọ́>",
            "<ìsàlẹ̀>",
            "</ìsàlẹ̀>",
            "<ibùgbé>",
            "</ibùgbé>",
            "<ìwọ̀n>",
            "</ìwọ̀n>",
            "<àkọsílẹ̀>",
            "</àkọsílẹ̀>",
            "<ìtò>",
            "</ìtò>",
            "<ìtòtẹ̀lé>",
            "</ìtòtẹ̀lé>",
            "<mú>",
            "</mú>",
            "<tótò>",
            "</tótò>",
            "<àpèjúwe>",
            "</àpèjúwe>",
            "<agbègbè>",
            "</agbègbè>",
            "<ìṣeṣe>",
            "</ìṣeṣe>",
            "<ìmú>",
            "</ìmú>",
            "@AdaríiGbígbé",
            "@Adarí",
            "ǸkanÌrètí",
            "@KókóÌbéèrè",
            "@ÈloSpringBoot",
            "@Ǹkan",
            "[Pẹ̀lúÀṣe]",
            "[LátiKókó]",
            "[AdaríiGbígbé]",
            "loÌwà",
            "loÀbájáde",
            "loÌṣètò",
            "ÌṣeṣeSíÒkè",
            "ÌṣeṣeỌ̀rọ̀",
            "Ìwọ̀nÈlò",
            "Àjọsọ",
            "Olùyẹ̀wò",
            "AlámójútóÀyè",
            "ÌwéÈtò",
            "Olùfetísílẹ̀Àyè",
            "ÒṣeGbígbọ̀n",
            "ṢeTẹ̀síwájú",
            "Ṣiṣẹ́Ṣíṣe",
            "Olùtọ́jú",
            "gbaǸkanÀìyípadà",
            "AlákosoÌfilélẹ̀",
            "ÀàyèÀtúnlò",
            "OníṣeÌtóbiÌfilélẹ̀",
            "wáÈròjàNípaseÌdánimọ̀",
            "ṢeÌṣẹ̀lẹ̀",
            "Ẹ̀rọ Amúṣẹ́yá",
            "Ṣíṣe Ètò Ìfibò",
            "Àdáṣe àti Ìṣàkóso Ṣíṣe Ètò",
            "Ìbàṣepọ̀ Ènìyàn àti Ẹ̀rọ",
            "Ìbárasọ̀rọ̀ Pẹ̀lú Ẹ̀rọ",
            "Ìmọ̀ Ẹ̀rọ Fún Ìtọ́jú Ẹ̀ya Ara",
            "@Ìdánwò",
            "ÌṣeÌdánwò",
            "Ìṣe Ètò Àmì",
            "Ẹ̀kọ́ Ìṣàkóso",
            "Kíkọ́ Ẹ̀rọ Ní Ìmọ̀"
    );
    public List<String> CodeInBulgarian = List.of(
            "ширина",
            "височина",
            "марж",
            "ориентация",
            "Топ",
            "<разширяемамаркировка>",
            "завърши",
            "вземететекст",
            "къмString",
            "задайтетекст",
            "Тост",
            "направитекст",
            "шоу",
            "Изгледнатекст",
            "Контекст",
            "Пакетресурси",
            "задайтеВидимост",
            "Видимост",
            "изчезнал",
            "Преглед",
            "Видими",
            "Невидим",
            "растерноизображение",
            "Намерение",
            "активност",
            "Линейнооформление",
            "Гравитация",
            "няма",
            "публичен",
            "статичен",
            "невалиден",
            "основен",
            "низ[]",
            "финал",
            "низ",
            "класификация",
            "характер",
            "улов",
            "случай",
            "байт",
            "винаги",
            "направи",
            "двойно",
            "друго",
            "изброяване",
            "разшири",
            "накрая",
            "плавам",
            "за",
            "продължи",
            "цяло",
            "инстанция",
            "импортиране",
            "инструменти",
            "ако",
            "интерфейс",
            "дълго",
            "модул",
            "местен",
            "нов",
            "пакет",
            "частен",
            "защитени",
            "изисква",
            "връщане",
            "къс",
            "родител",
            "превключвател",
            "синхронизирани",
            "това",
            "хвърлям",
            "хвърля",
            "преходен",
            "опитвам",
            "променлива",
            "летлив",
            "нула",
            "невярно",
            "вярно",
            "докато",
            "прекъсвам",
            "булево",
            "твърдят",
            "абстрактно",
            "постоянен",
            "дефинирам",
            "Изтрий",
            "изключителен",
            "от",
            "алтернативно",
            "глобален",
            "в",
            "е",
            "ламбда",
            "нищо",
            "ограждащ",
            "не",
            "или",
            "пас",
            "повишавам",
            "с",
            "Добив",
            "добавяне",
            "алтер",
            "възходящ",
            "между",
            "създавайте",
            "таблица",
            "изпускайте",
            "низходяща",
            "База",
            "различен",
            "съществува",
            "като",
            "изберете",
            "където",
            "<маркиране>",
            "<заглавие1>",
            "</заглавие1>",
            "<заглавие2>",
            "</заглавие2>",
            "<заглавие3>",
            "</заглавие3>",
            "<заглавие4>",
            "</заглавие4>",
            "<заглавие5>",
            "</заглавие5>",
            "<заглавие6>",
            "</заглавие6>",
            "<съставен>",
            "<заглавие>",
            "</заглавие>",
            "<дефиниции>",
            "</дефиниции>",
            "</маркиране>",
            "</съставен>",
            "<заглавка>",
            "</заглавка>",
            "<разделение>",
            "</разделение>",
            "<удебелен>",
            "</удебелен>",
            "<прекъсвам>",
            "</прекъсвам>",
            "<параграф>",
            "</параграф>",
            "<резюме>",
            "</резюме>",
            "<подробности>",
            "</подробности>",
            "<основен>",
            "</основен>",
            "<отдолу>",
            "</отдолу>",
            "<адрес>",
            "</адрес>",
            "<педя>",
            "</педя>",
            "<сценарий>",
            "</сценарий>",
            "<неподредени>",
            "</неподредени>",
            "<поръчан>",
            "</поръчан>",
            "<изберете>",
            "</изберете>",
            "<вещ>",
            "</вещ>",
            "<навигация>",
            "</навигация>",
            "<кутия>",
            "</кутия>",
            "<бутон>",
            "</бутон>",
            "<опция>",
            "</опция>",
            "@Трансферконтролер",
            "@Контролер",
            "Отговарящсубект",
            "@Тялоназаявката",
            "@ПриложениеSpringBoot",
            "@Обект",
            "[Упълномощен]",
            "[Тялоназаявката]",
            "[Трансферконтролер]",
            "използвайтеState",
            "използвайтеЕфект",
            "използвайтеКонтекст",
            "Повдигнатбутон",
            "Текстовбутон",
            "Скеле",
            "Диалог",
            "Итератор",
            "Мениджър_на_местоположението",
            "Манифест",
            "Слушател_на_местоположение",
            "Вибратор",
            "Праветенепрекъснато",
            "Работим",
            "Манипулатор",
            "вземетеекземпляр",
            "Мениджърнаоформлението",
            "Изгледзарециклиране",
            "Раздуваненаоформлението",
            "вземетеелементпоидентификатор",
            "Излъчвателнасъбития",
            "роботика",
            "Програмиране на вградени системи",
            "Системи за автоматизация и управление",
            "Взаимодействие човек-машина",
            "Телекомуникации",
            "Биомедицинско инженерство",
            "@Тест",
            "Тестване",
            "Обработка на сигнали",
            "Теория на управлението",
            "Машинно обучение"

    );

    public List<String> CodeDescription = List.of(
            "the amount of space corresponding to the width a component should take up on the screen, typically measured in density pixels, e.g. android:layout_width=\"0dp\" (XML/Android)",
            "the amount of space corresponding to the height a component should take up on the screen, typically measured in density pixels, e.g. android:layout_height=\"wrap_content\" (XML/Android)",
            "the space a component leaves in between it and other components, e.g. android:layout_margin=\"8dp\" (XML/Android)",
            "laying out of components in a LinearLayout, either horizontally or vertically, e.g. android:orientation=\"horizontal\" (XML/Android)",
            "top placement of a component on the screen, with respect to the immediate upper component (or parent, if none), e.g. app:layout_constraintTop_toBottomOf=\"@+id/anotherComponent\" (XML/Android)",
            "defines an extensible markup language document (xml), e.g. <?xml version=\"1.0\" encoding=\"utf-8\"?> (XML/Android)",
            "closes the activity, e.g. finish(); (Android/Java)",
            "gets the text inside a view supporting such operation, e.g. theTextView.getText(); (Android/Java)",
            "converts a type to its string representation, e.g. theTextView.getText().toString(); (Android/Java)",
            "sets the text inside a view supporting such operation, e.g. theTextView.getText(\"howdy\"); (Android/Java)",
            "mechanism to inform the user of something (Android/Java)",
            "mechanism to construct text to inform the user (Android/Java)",
            "show the constructed form of informing the user of something, e.g. Toast.makeText(getApplicationContext(), \"theMessage\", Toast.LENGTH_SHORT).show(); (Android/Java)",
            "a part of the screen (Activity) that is configured to display text (Android/Java)",
            "collection of key related items that can be referenced when perform a specific task or tasks (Android/Java)",
            "component that enables our application to load data from distinct files containing locale-specific data (Android/Java)",
            "sets the visibility of something, e.g. theTextView.setVisibility(View.VISIBLE); (Android/Java)",
            "the visibility of something, e.g. View.INVISIBLE, View.VISIBLE, View.GONE (Android/Java)",
            "no longer there and not taking up any space (Android/Java)",
            "container (Android/Java)",
            "state of visibility (Android/Java)",
            "state of visibility (Android/Java)",
            "a type of picture file structure (Android/Java)",
            "intention to do something, generally determining the outcome of an operation (Android/Java)",
            "screen presenting information to the user, forming the container of other components (Android/Java)",
            "a layout of presenting components of the app to the user, sequentially and in a straight line, horizontally or vertically (Android/Java)",
            "how much space a component takes up on the screen, in proportion to neighboring components, typically in a LinearLayout (Android/Java)",
            "pulled by gravity to the center",
            "access modifier (Java)",
            "belongs to the class (Java)",
            "returns nothing (Java)",
            "entry point of the program (Java)",
            "an array of strings (Java)",
            "cannot change once declared (Java)",
            "text (Java)",
            "unit of code (Java)",
            "a single character (Java)",
            "catch the irregular behavior (Java)",
            "contention to determine an outcome (Java)",
            "space roughly equivalent to 8bits (2 raised to power of 8)",
            "method that can be overridden or used as is in interface (Java)",
            "do the specified at least once (Java)",
            "number with larger fractional part (Java)",
            "alternative action (Java)",
            "enumeration of values (Java)",
            "inherits what is publicly accessible (Java)",
            "happens always after catching error, usually for cleanup (Java)",
            "number with fractional part (Java)",
            "beginning of a loop (Java)",
            "ignore this occurrence, continue previous intended action (Java)",
            "whole number (Java)",
            "is the same type (Java)",
            "bring in code library (Java)",
            "must do whatever is specified in abstract class (Java)",
            "test a condition (Java)",
            "abstract class - implementing class must do everything specified (Java)",
            "a large number, can be in the range of quadrillion (Java)",
            "group of closely related packages (Java)",
            "in another language (Java)",
            "creates a copy (Java)",
            "code files in the same directory (Java)",
            "only accessible in the current file (Java)",
            "accessible in the current file and its instances (Java)",
            "requires a module (Java)",
            "end execution by returning to the caller, w/ or w/o result (Java)",
            "whole number, cannot exceed roughly 32767 (Java)",
            "a parent class (Java)",
            "start considerations on a contention (Java)",
            "block access to other threads until done (Java)",
            "this particular unit (Java)",
            "blow up - i.e. cause error (Java)",
            "can blow up (Java)",
            "this field is not candidate to serialization (Java)",
            "proceed with caution (Java)",
            "declare variable but not specific on the type (Java)",
            "always only keep most recent version accessible (Java)",
            "matches nothing else - roughly equivalent to nothing (Java)",
            "not true (Java)",
            "not false (Java)",
            "while a condition holds (Java)",
            "stop at that point (Java)",
            "value that can only be true or false (Java)",
            "make certain of a condition before proceeding (Java)",
            "has part that must be (or has been) implemented by programmer (Java)",
            "unchangeable (Java)",
            "define a distinct unit of work, i.e. a function (Python)",
            "delete (Python)",
            "error (Python)",
            "bring in a part of a module to current file (Python)",
            "alternative action (Python)",
            "can be used throughout the program (Python)",
            "does this exist in a collection/list/array e.t.c (Python)",
            "tests if two variables refer to the same object (Python)",
            "anonymous function (Python)",
            "matches nothing else - roughly equivalent to nothing (Python)",
            "allows nested function access to variable from enclosing scope (Python)",
            "not another object (Python)",
            "or another object (Python)",
            "do nothing further (Python)",
            "blow up - i.e. cause error (Python)",
            "creates a scope and ensures cleanup afterwards",
            "returns a generator object (Python, same also true for C#'s Iterator)",
            "add column to table (SQL)",
            "alter the structure of table (SQL)",
            "ascending order (SQL)",
            "within range of values (SQL)",
            "create database, table etc. (SQL)",
            "structure holding relational values of entities (SQL)",
            "delete (SQL)",
            "descending order (SQL)",
            "structure holding relational data and other relevant items (SQL)",
            "no duplicates (SQL)",
            "tests if value exists (SQL)",
            "match specified parts of a condition (SQL)",
            "retrieve data (SQL)",
            "specifies condition (SQL)",
            "begin web page (HTML)",
            "begin largest heading (HTML)",
            "end largest heading (HTML)",
            "begin second largest heading (HTML)",
            "end second largest heading (HTML)",
            "begin third largest heading (HTML)",
            "end third largest heading (HTML)",
            "begin fourth largest heading (HTML)",
            "end fourth largest heading (HTML)",
            "begin fifth largest heading (HTML)",
            "end fifth largest heading (HTML)",
            "begin sixth largest heading (HTML)",
            "end sixth largest heading (HTML)",
            "begin body - the largely visible part of the page (HTML)",
            "begin title of the document (HTML)",
            "end title of the document (HTML)",
            "begin head - the information required to construct the page (HTML)",
            "end head (HTML)",
            "end the document (HTML)",
            "end body (HTML)",
            "begin header - typically contains navigation elements (HTML)",
            "end header (HTML)",
            "begin division of page (HTML)",
            "end division of page (HTML)",
            "begin bold (HTML)",
            "end bold (HTML)",
            "begin line break (HTML)",
            "end line break (HTML)",
            "begin paragraph (HTML)",
            "end paragraph (HTML)",
            "begin summary (HTML)",
            "end summary (HTML)",
            "begin details (HTML)",
            "end details (HTML)",
            "begin main - the main content of the document (HTML)",
            "end main (HTML)",
            "begin footer (HTML)",
            "end footer (HTML)",
            "begin address (HTML)",
            "end address (HTML)",
            "begin span (HTML)",
            "end span (HTML)",
            "begin script - typically in another language like JavaScript (HTML)",
            "end script (HTML)",
            "begin unordered list (HTML)",
            "end unordered list (HTML)",
            "begin ordered list (HTML)",
            "end ordered list (HTML)",
            "begin dropdown (HTML)",
            "end dropdown (HTML)",
            "begin item in list (HTML)",
            "end item in list (HTML)",
            "begin navigation component (HTML)",
            "end navigation component (HTML)",
            "begin textarea - i.e. multiline text box (HTML)",
            "end textarea (HTML)",
            "begin button (HTML)",
            "end button (HTML)",
            "begin an item - i.e. option in dropdown (HTML)",
            "end option in dropdown (HTML)",
            "annotation to tell Spring Boot that this Java class has functionality to send and receive API requests that may not lead to loading (perhaps HTML) front-end (Java/Spring Boot)",
            "annotation to tell Spring Boot that this Java class has functionality to send and receive API requests that may or may not lead to loading (perhaps HTML) front-end (Java/Spring Boot)",
            "annotation to tell Spring Boot function what type of data it is expected to return, e.g. public ResponseEntity<String> getResource() {//method body} to return String data type (Java/Spring Boot)",
            "annotation to tell Spring Boot function that data coming in is within the request itself , e.g. public ResponseEntity<Person> createPerson(@RequestBody Person person) {//method body} meaning data of Person type is present in this request (Java/Spring Boot)",
            "annotation to tell a Java program that it is to be used as a Spring Boot application instead (Java/Spring Boot)",
            "annotation (from JPA) to tell Spring Boot that this Java class represents a table in the database (Java/Spring Boot)",
            "attribute to only allow authorized (with token, jwt etc.) requests to access the resource controlled by this function (.NET)",
            "attribute to tell the application that data coming in is within the request itself, e.g. public IActionResult GetResource([FromBody] string info) meaning data of type string is present in this request (.NET)",
            "attribute to tell the application that this class is responsible for serving API requests (.NET)",
            "it's a way in React (formally called Hook) to declare a variable and also a way to update that variable, e.g. const [count, setCount] = useState(0); declares a count variable of number type, and a way to be used later to update the value of count - setCount (React)",
            "it's a way in React (formally called Hook) to do something and subsequently manage the side effects of that action, like fetching data from API, e.g. const fetchData = () => {//actually fetch the data and probably update a state with useState} (React)",
            "it's a way in React (formally called Hook) to access the context values created by the React.createContext API, and then share the values (like themes, user information, etc.) between components, e.g. const ThemeContext = createContext(); const toggleTheme = () => {setTheme((prevTheme) => (prevTheme === 'light' ? 'dark' : 'light'));}; //setTheme will usually be a useState (React)",
            "ElevatedButton is a type of button that has a raised effect, meaning its background color is raised significantly when pressed, e.g. ElevatedButton(onPressed: () {}, child: Text('Elevated Button')); (Flutter)",
            "TextButton is a simple button with a text OutlinedButton is a type of button that has a border around it, but is not filled with a color, and is typically used for secondary actions, e.g. TextButton(onPressed: () {}, child: Text('Text Button')); (Flutter)",
            "a top-level widget that provides a basic material design visual layout structure, e.g. Scaffold(appBar: AppBar(title: Text('App Bar')), body: Center(child: Text('Body'))); (Flutter)",
            "widget that displays a dialog box to the user, e.g. showDialog(context: context, builder: (context) => AlertDialog(title: Text('Dialog Title'), content: Text('Dialog Content'), actions: [TextButton(onPressed: () => Navigator.of(context).pop(), child: Text('Close'))])); (Flutter)",
            "something that enables going over the items in a collection (e.g. list or set) one at a time sequentially without exposing its underlying structure, e.g. Iterator<String> iterator = collection.iterator(); (Java)",
            "a system service in Android that helps apps access the device's location using GPS, Wi-Fi, or cellular networks, e.g. ((LocationManager) getSystemService(Context.LOCATION_SERVICE)).requestLocationUpdates(LocationManager.GPS_PROVIDER, 5000, 10, location -> {int latitude = (int) location.getLatitude();}); //gets current latitude of the device (Android/Java)",
            "a special file in an Android app that contains essential information about the app, like its name, version, and permissions it needs to run (Android)",
            "an interface in Android that allows apps to receive updates about the device's location changes in real-time, e.g. LocationListener locationListener = location -> {int longitude = (int) location.getLongitude();}; //gets current longitude of the device (Android/Java)",
            "a system service in Android that allows you to control the device's vibration feature, e.g. ((Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE)).vibrate(500) //the phone vibrates for half a second, context could be getApplicationContext() or other source (Android/Java)",
            "manages a thread's message queue, allowing it to process messages and run tasks, e.g. Looper.prepare(); Looper.loop(); (Android/Java)",
            "represents a task that can be executed by a thread, e.g. Runnable myRunnable = new Runnable() { public void run() { /* task code */ } }; (Android/Java)",
            "used to send and process messages or Runnable tasks associated with a thread's Looper, e.g. Handler handler = new Handler(Looper.getMainLooper()); handler.post(myRunnable); (Android/Java)",
            "Singleton's design pattern's way of ensuring a class has only one instance and provides a global point of access, e.g. public static MySingleton getInstance() { if (instance == null) { instance = new MySingleton(); } return instance; (Java and other languages including c#)",
            "arranges child views in a RecyclerView, which is a flexible view for displaying large data sets, e.g. recyclerView.setLayoutManager(new LinearLayoutManager(this)); (Android/Java)",
            "a flexible view for displaying large data sets in a list or grid format, e.g. RecyclerView recyclerView = findViewById(R.id.recyclerView); recyclerView.setAdapter(myAdapter); (Android/Java)",
            "used to instantiate layout XML files into their corresponding View objects, e.g. View view = LayoutInflater.from(context).inflate(R.layout.my_layout, parent, false); (Android/Java)",
            "retrieves an HTML element by its unique ID, allowing manipulation of its properties or content, e.g. document.getElementById(\"myElement\").innerHTML = \"Hello, World!\"; (JavaScript)",
            "Node.js uses an event-driven architecture, allowing asynchronous event handling, e.g. const myEmitter = new EventEmitter(); myEmitter.on('event', () => console.log('An event occurred!')); myEmitter.emit('event'); (Node.js)",
            "Robotics involves designing, constructing, and operating robots to perform tasks autonomously or semi-autonomously, e.g. rospy.Publisher('/cmd_vel', Twist, queue_size=10).publish(Twist(linear=Vector3(x=0.5))) (Python w/ ROS)",
            "Programming for embedded systems involves writing software that directly interacts with hardware components, e.g. digitalWrite(13, HIGH); // Turn on LED (C for Arduino)",
            "Automation and Control Systems manage processes and machinery with minimal human intervention, e.g. plc.write('MyTag', 1)  # Write value 1 to the PLC tag (Python w/ PLC)",
            "Human-Machine Interaction (HMI) focuses on the interfaces through which humans interact with machines and systems, e.g. new Button(\"Click Me\").setOnAction(e -> System.out.println(\"Button Clicked!\")); (Java with JavaFX)",
            "Telecommunications involves the transmission of information over distances for communication, e.g. s.sendall(b'Hello, World!') (Python with Socket)",
            "Biomedical Engineering applies engineering principles to the medical field for healthcare solutions, e.g. mean_heart_rate = mean(data.heart_rate); (MATLAB)",
            "Annotation to denote a test method (Java)",
            "Testing involves evaluating software or systems to ensure they meet specified requirements and function correctly, e.g. assertEquals(5, 2 + 3); (Java)",
            "Signal Processing involves analyzing, modifying, and synthesizing signals such as sound, images, and scientific measurements, e.g. plt.plot(np.linspace(0, 1, 500), np.sin(2 * np.pi * 5 * np.linspace(0, 1, 500))); plt.show(); (Python with NumPy)",
            "Control theory is a field that focuses on the behavior of dynamical systems and how to manipulate their inputs to achieve desired outputs, e.g. t, y = ctrl.forced_response(ctrl.TransferFunction([1], [1, 2, 1]), T=np.linspace(0, 10, 100), U=np.ones(100)); (Python with Control Library)",
            "Machine Learning involves algorithms that allow computers to learn from and make predictions based on data, e.g. from sklearn.linear_model import LinearRegression; model = LinearRegression().fit(X, y); (Python with Scikit-Learn)"
    );


}
